     =========================================================
     Geant4 - an Object-Oriented Toolkit for Simulation in HEP
     =========================================================

                            Faraday Cup Simulation
                            ----------------------

Table of Contents:
1- Geometry Definition
2- PHYSICS LIST 
3- ACTION INITALIZATION
4- PRIMARY GENERATOR 	
5- RUNS and EVENTS 
6- DETECTOR RESPONSE
7- HISTOGRAMS
8- HOW TO BUILD/RUN
A- VISUALIZATION
B- USER INTERFACES

	
 1- GEOMETRY DEFINITION
 
   DetectorConstruction class
   Copper cyldinder (r=5cm;,h=15cm) resides within a Kapton insulation (r=5.5cm,h=16cm),
   within silver grounding sheath (r=5.7cm,h=16.4cm), also insulated with Kapton
   (r=6.32cm,h=17.64cm); each recursively centered along the parent's length.

   The beam is aligned to hit the Faraday Cup in the (+z)-direction, a distance *d* away
   from the center of the circular face.  The world which contains the beam and cup is
   composed of air material.
   	
   In addition, a global, uniform, and transverse magnetic field can be 
   applied using G4GlobalMagFieldMessenger, instantiated in 
     DetectorConstruction::ConstructSDandField 
   with a non zero field value, or via interactive commands. 
   For example:

   /globalField/setValue 0.2 0 0 tesla

  Air
	================================================
	|| Kapton                                     ||
     	|| ========================================== ||
        || || Ag                                   || ||
	|| || ==================================== || ||
	|| || || Kapton                         || || ||
        || || || ============================== || || ||
        || || || ||  Cu                      || || || ||
 beam   || || || ||                          || || || ||
======> || || || ||                          || || || ||
        || || || ||                          || || || ||
        || || || ||                          || || || ||
        || || || ============================== || || ||
        || || ||                                || || ||
	|| || ==================================== || ||
        || ||                                      || ||
        || ========================================== ||
	||                                            ||
 	================================================
	
   A more general version of this geometry can be found in:
   examples/extended/electromagnetic/TestEm3   
   where all the geometry parameters, the absorber and gap materials 
   can be modified interactively via the commands defined in the DetectorMessenger
   class.
 	    
 2- PHYSICS LIST
 
   The particle's type and the physic processes which will be available
   in this example are set in the FTFP_BERT physics list. This physics list 
   requires data files for electromagnetic and hadronic processes.
   See more on installation of the datasets in Geant4 Installation Guide, 
   Chapter 3.3: Note On Geant4 Datasets:
   http://geant4.web.cern.ch/geant4/UserDocumentation/UsersGuides/InstallationGuide/html/ch03s03.html
   The following datasets: G4LEDATA, G4LEVELGAMMADATA and G4SAIDXSDATA are
   mandatory for this example.
 
   In addition the build-in interactive command:
               /process/(in)activate processName
   allows to activate/inactivate the processes one by one.
 	 
 3- ACTION INITALIZATION

   A newly introduced class, ActionInitialization, 
   instantiates and registers to Geant4 kernel all user action classes.
   
   While in sequential mode the action classes are instatiated just once,
   via invoking the method:
      ActionInitialization::Build() 
   in multi-threading mode the same method is invoked for each thread worker
   and so all user action classes are defined thread-local.

   A run action class is instantiated both thread-local 
   and global that's why its instance is created also in the method
      ActionInitialization::BuildForMaster()
   which is invoked only in multi-threading mode.

 4- PRIMARY GENERATOR
 
   The primary beam consists of 250 MeV protons. The type of the particle
   and its energy are set in the PrimaryGeneratorAction class, and can
   be changed via the G4 built-in commands of the G4ParticleGun class.
 	
 5- RUNS and EVENTS
 
   A run is a set of events. 
   The user can choose the frequency of printing via the Geant4 interactive 
   command, for example:
    
     /run/printProgress 100
   
 6- DETECTOR RESPONSE
 
   The energy deposit and track lengths of the charged particles are recorded on
   an event by event basis in the Absober and Gap layers.
   
   In order to demonstrate several possible ways of data scoring,
   the example is provided in four variants:
   
   User Actions
   
     These 4 quantities are data members of the EventAction class;  
     They are collected step by step in SteppingAction::UserSteppingAction().
   
     In EventAction::EndOfEventAction(), these quantities are printed and 
     filled in histogram datasets to accumulate statistic and compute 
     dispersion.
     
  7- HISTOGRAMS
 
   The analysis tools are used to accumulate statistics and compute the dispersion
   of the energy deposit and track lengths of the charged particles.
   
   The accumulated statistic and computed dispersion is printed at the end of 
   run, in RunAction::EndOfRunAction().
   When running in multi-threading mode, the histograms accumulated on threads are
   automatically merged in a single output file, while the ntuple is written
   in files per thread.

 8- HOW TO BUILD/RUN
 
   Generate a Makefile, then compile the project into an executable
   % mkdir build
   % cd build
   % cmake -DGeant4_DIR=$G4COMP ..
   % make
   The executable, 'runFaradayCup', is found in build/FCbin/

   This example handles the program arguments in a new way.
   It can be run with the following optional arguments:
   % runFaradayCup [-m macro ] [-u UIsession] [-t nThreads]
   
   The -t option is available only in multi-threading mode
   and it allows the user to override the Geant4 default number of 
   threads. The number of threads can be also set via G4FORCENUMBEROFTHREADS
   environment variable which has the top priority.
 
   - Execute runFaradayCup in the 'interactive mode' with visualization
        % runFaradayCup
     and type in the commands from run1.mac line by line:  
        Idle> /tracking/verbose 1 
        Idle> /run/beamOn 1
        Idle> ...
        Idle> exit
     or
        Idle> /control/execute run1.mac
        ....
        Idle> exit

   - Execute runFaradayCup in the 'batch' mode from macro files
     (without visualization)
        % runFaradayCup -m run2.mac
        % runFaradayCup -m runFaradayCup.in > runFaradayCup.out
 		
   - Execute runFaradayCup in the 'interactive mode' with a selected UI session,
     e.g. tcsh
        % runFaradayCup -u tcsh 

 A- VISUALIZATION
 
   The visualization manager is set via the G4VisExecutive class
   in the main() function in runFaradayCup.cc.    
   The initialisation of the drawing is done via a set of /vis/ commands
   in the macro vis.mac. This macro is automatically read from
   the main function when the example is used in interactive running mode.

   By default, vis.mac opens an OpenGL viewer (/vis/open OGL).
   The user can change the initial viewer by commenting out this line
   and instead uncommenting one of the other /vis/open statements, such as
   HepRepFile or DAWNFILE (which produce files that can be viewed with the
   HepRApp and DAWN viewers, respectively).  Note that one can always
   open new viewers at any time from the command line.  For example, if
   you already have a view in, say, an OpenGL window with a name
   "viewer-0", then
      /vis/open DAWNFILE
   then to get the same view
      /vis/viewer/copyView viewer-0
   or to get the same view *plus* scene-modifications
      /vis/viewer/set/all viewer-0
   then to see the result
      /vis/viewer/flush

   The DAWNFILE, HepRepFile drivers are always available
   (since they require no external libraries), but the OGL driver requires
   that the Geant4 libraries have been built with the OpenGL option.

   For more information on visualization, including information on how to
   install and run DAWN, OpenGL and HepRApp, see the visualization tutorials,
   for example,
   http://geant4.slac.stanford.edu/Presentations/vis/G4[VIS]Tutorial/G4[VIS]Tutorial.html
   (where [VIS] can be replaced by DAWN, OpenGL and HepRApp)

   The tracks are automatically drawn at the end of each event, accumulated
   for all events and erased at the beginning of the next run.
 
 B- USER INTERFACES
   
   The user command interface is set via the G4UIExecutive class
   in the main() function in runFaradayCup.cc 
   The selection of the user command interface is then done automatically 
   according to the Geant4 configuration or it can be done explicitly via 
   the third argument of the G4UIExecutive constructor (see runFaradayCup.cc). 
